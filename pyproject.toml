[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-chatter"
dynamic = ["version", "description"]
readme = "README.md"
requires-python = ">=3.8"
license = "AGPL-3.0-or-later"
authors = [
    { name = "Fynn Freyer", email = "fynn.freyer@googlemail.com" },
]

keywords = [
    "ai",
    "chatbot",
    "chatgpt",
]

classifiers = [
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "openai",
    "platformdirs",
    "pydantic-settings",
    "sqlalchemy",
]

[project.optional-dependencies]
dev = [
    'hatch',
    'pip-tools',
    'twine',
]
web = [
    'bs4',
    'markdownify',
    'requests-html',
]


[project.urls]
Documentation = "https://github.com/FynnFreyer/ai-chatter#readme"
Issues = "https://github.com/FynnFreyer/ai-chatter/issues"
Source = "https://github.com/FynnFreyer/ai-chatter"

[project.scripts]
chatter = "ai_chatter.scripts:main"
howto = "ai_chatter.scripts:howto"

[tool.hatch.version]
path = "src/ai_chatter/__about__.py"

[tool.hatch.description]
path = "src/ai_chatter/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]
release = [
    # check for staged or unstaged changes (abort if any)
    "git diff --exit-code",
    "git diff --cached --exit-code",
    # if none, we bump version, and commit
    "hatch version {args:patch}",
    'git commit -am "build: bump version to $(hatch version) for release"',
    # now generate a tag, and push to origin
    "git tag $(hatch version)",
    "git push origin --tags",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.docs]
features = [
    "web",
]
dependencies = [
    "myst-parser",
    "sphinx",
    "sphinx_rtd_theme",
    'sphinx-autodoc-typehints',
    "sphinxcontrib-plantuml",
    "sphinxcontrib-relativeinclude",
    "sphinxcontrib-svg2pdfconverter[CairoSVG]",
]
[tool.hatch.envs.docs.scripts]
build = [
    "- rm -r docs/_build/{args}",
    # in case of pdf we have to use the latex builder, otherwise we can proceed
    'if [ "{args}" = "pdf" ]; then sphinx-build -aE -b latex docs docs/_build/pdf; else sphinx-build -aE -b {args} docs docs/_build/{args}; fi',
    'if [ "{args}" = "pdf" ]; then make -C docs/_build/pdf; fi',
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
    "sqlalchemy[mypy]",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/ai_chatter tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py38"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    # "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # black usually takes care of line length where necessary
    "E501",
    # I'm fine with star imports (in __init__.py files)
    "F403",
    # new | annotations are optional, because Optional[X] is nicer than X | None
    "UP007",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["ai_chatter"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.mccabe]
max-complexity = 8

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["ai_chatter", "tests"]
branch = true
parallel = true
omit = [
    "src/ai_chatter/__about__.py",
]

[tool.coverage.paths]
ai_chatter = ["src/ai_chatter", "*/ai-chatter/src/ai_chatter"]
tests = ["tests", "*/ai-chatter/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.8"
warn_unused_configs = true
plugins = [
    'sqlalchemy.ext.mypy.plugin',
    'pydantic.mypy'
]
